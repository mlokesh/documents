Boxing:
All primitive types are boxed when it goes to list
When it comes out it has to be out.

javac, java, javadoc (Document extraction) - Generates HTML code, classpath.

StringBuffer
StringBuilder

Static Type and Dynamic Type.

Use ? if you have to use if statement in constructor call.
Example: super(k == 0 ? -1 : j + k);
or super(j + k);

================================================================================================================================================
Aspect Oriented Programming:
Springs:

Loiane Groner Blog Site: -- Read blogs

JUnit Annotations:
@Test
@Before
@After
@Ignore
@Test(expected = Exception.class)
@Test(timeout=100)
@BeforeClass
@AfterClass

http://www.mkyong.com/unittest/junit-4-tutorial-6-parameterized-test/
http://www.mkyong.com/unittest/

- Junit4 vs TestNG

Running suite:

    @RunWith(Suite.class)
    @Suite.SuiteClasses({
        WordCounterTest.class,
        JournalTest.class
        })

final - initialized once and not changed.

================================================================================================================================================
Exception handling:
try, catch, finally, throw, throws

Have attributes.
--------
Inputs to assignment:
Add new property
Item: Immutable (No set methods) - Can't change the data
InvoiceItem: Immutable (Read only) TotalValue, TotalDiscounts

Invoice: Collection of invoice items.
No need to define IllegalArgument - It is runtime and check this.

Create your own DiscountException:
Validate that three exceptions

@Test: look at up to handle exceptions.
================================================================================================================================================
UML - Underline is static

Declare variables in UPPER CASE as they are static
    private static final double MANAGER_PAY = 10.00;

Super has to be first in constructor.

Method lookup:
Keep all your fields private - it is protected access
Not everything should be public. Avoid using protected access specified.

Abstract Class - Will have some implementation and it is slightly coupled.
Abstract Class supports polymorphism.

Use final if you don't want your class to be extended.


================================================================================================================================================
Read more on Reflection, Inheritance & Polymorphism
Read more on StringBuffer class
Class Inheritance - Homogeneous
Interface Inheritance - Heterogeneous

Access specifiers
Modifiers

toString() -- Is used to know the state of the object.
getClass() - Returns the instance of the class.


6.7.1 - Netbeans. Plugin: UML

Links: http://www.informit.com/articles/article.aspx?p=1021579

Abstract Class: Can't do new on this.

Interfaces are always public:
All collections are polymorphic...
Generics limit polymorphic effect

To prevent polymorphism: make it final

ASCII Table
-- Can be represented in Decimal, Hexadecimal, Octal
Unicode:

-- Utility class can never be inherited so make the utility class as final

    StringBuffer sb = new StringBuffer(text);
    for (int i = 0; i < text.length(); i++) {
        sb.setCharAt(i, charEncrypt(sb.charAt(i)));
        }

export CLASSPATH=.:/Users/......./.class

================================================================================================================================================
