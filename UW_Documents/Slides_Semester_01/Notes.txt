03/28/2012
==========

-- Green light and Red light
public static void main(String[] args) {
    org.junit.runner.JunitCore.main("edu.washintgon.ext.JouralTest);
    }

All created in JavaScript:
dev.sencha.com/deploy/ext-4.0.7-gpl/examples
Sencha - Extenjion JS
Sencha Mobile

Boxing:
All primitive types are boxed when it goes to list
When it comes out it has to be out.

javac, java, javadoc (Document extraction) - Generates HTML code, classpath.

StringBuffer
StringBuilder

Static Type and Dynamic Type.

Use ? if you have to use if statement in constructor call.
Example: super(k == 0 ? -1 : j + k);
or super(j + k);

================================================================================================================================================
03/21/2012
==========

Inner Classes:
+++++++++++++
Define class inside a class.

Patterns:
++++++++
Singleton: Only a single instance of a class exists. Private constructor. Instantiate via a static getInstance method.
(Only one instance of object created)

Eclipse plug-in: http://www.patternbox.com/

Aspected Oriented Programming:
+++++++++++++++++++++++++++++



Springs:
+++++++

Loiane Groner Blog Site: -- Read blogs


JUnit Annotations:
@Test
@Before
@After
@Ignore
@Test(expected = Exception.class)
@Test(timeout=100)
@BeforeClass
@AfterClass

http://www.mkyong.com/unittest/junit-4-tutorial-6-parameterized-test/
http://www.mkyong.com/unittest/

- Junit4 vs TestNG

Running suite:

    @RunWith(Suite.class)
    @Suite.SuiteClasses({
        WordCounterTest.class,
        JournalTest.class
        })

final - initialized once and not changed.

Inputs to final project:
-----------------------
Library numer - start of with one and go
Duplicate patron - check the list (for loop) and find duplicate
AddPatron - You are going to get library no
Remove items
Remove patron - based on library no
Checks the no, if it is alreasy checked out.

Junit4 - Only against Library class

Only one item in the library, use == or equals method (use object reference and see whether it is same)
No multiple versions of same book.

A patron can check out only one item at a time

ENUM - No getter methods mandatory.

Removing patron: They can pass patron or library no. Check both and loop thru that and check that exists.

-- Check for null when adding (LibraryItem item)



================================================================================================================================================
03/14/2012:
==========

Exception handling:
try, catch, finally, throw, throws

Have attributes.
--------
Inputs to assignment:
Add new property
Item: Immutable (No set methods) - Can't change the data
InvoiceItem: Immutable (Read only) TotalValue, TotalDiscounts

Invoice: Collection of invoice items.
No need to define IllegalArgument - It is runtime and check this.

Create your owen DiscountException:
Validate that three exceptions

@Test: look at up to handle exceptions.
================================================================================================================================================

03/07/2012:
==========

Assignment 5 Review:
UML - Underline is static

Declare variables in UPPER CASE as they are static
    private static final double MANAGER_PAY = 10.00;

Super has to be first in constructor.

Method lookup:
Keep all your fields private - it is protected access
Not everything should be public. Avoid using protected access specified.

Abstract Class - Will have some implementation and it is slightly coupled.
Abstract Class supports polymorphism.

Use final if you don't want your class to be extended.


Assignment 6 Inputs:
-------------------
Repackage it.
Cast it, - CommissionedEmployee interface
Manager: Change method name from bonus to something commission
Restrict Access:
private as much as possible, either protected or package level
--
Two packages:
New packages only two interfaces and one abstract class and keep everything else in existing package.

================================================================================================================================================
02/29/2012:
==========

Read more on Reflection, Inheritance & Polymorphism
Read more on StringBuffer class
Class Inheritance - Homogeneous
Interface Inheritance - Heterogeneous

Access specifiers
Modifiers

toString() -- Is used to know the state of the object.
getClass() - Returns the instance of the class.


6.7.1 - Netbeans. Plugin: UML

Links: http://www.informit.com/articles/article.aspx?p=1021579

Abstract Class: Can't do new on this.

Interfaces are always public:
All collections are polymorphic...
Generics limit polymorphic effect

To prevent polymorphism: make it final

Assignment Review:
=================
ASCII Table
-- Can be represented in Decimal, Hexadecimal, Octal
Unicode:

-- Utility class can never be inherited so make the utility class as final

    StringBuffer sb = new StringBuffer(text);
    for (int i = 0; i < text.length(); i++) {
        sb.setCharAt(i, charEncrypt(sb.charAt(i)));
        }

export CLASSPATH=.:/Users/......./.class

================================================================================================================================================
